import io/bufio;
from .. import util;

final long NUM_BUF_MAX_SIZE = 30;   //解析数字的时候最大的字节数限制，对64位整数来说足够了

char recv_char(bufio.Reader reader)
{
    char ch;
    if (!reader.read_char(ref ch))
    {
        throw_proto_err("连接异常关闭");
    }
    return ch;
}

long recv_int(bufio.Reader reader)
{
    var b = new char[NUM_BUF_MAX_SIZE];
    long sz = reader.read_until_char(b, '\r');
    if (sz >= NUM_BUF_MAX_SIZE)
    {
        throw_proto_err("数字过长：%r".(new String(b)));
    }
    if (sz == 0 || b[sz - 1] != '\r')
    {
        throw_proto_err("连接异常关闭");
    }
    if (recv_char(reader) != '\n')
    {
        throw_proto_err(`‘数字\r’后需要‘\n’`);
    }

    var s = new String(b[: sz - 1]);
    long n;
    var c = call_and_catch<ValueError>([-]{
        n = s.parse_long(10);
    });
    if (c !== nil)
    {
        throw_proto_err("非法的数字：%r".(s));
    }

    return n;
}

char[] recv_part(bufio.Reader reader)
{
    if (recv_char(reader) != '$')
    {
        throw_proto_err("字段头部需要字符‘$’");
    }

    long part_len = recv_int(reader);
    if (part_len < 0)
    {
        throw_proto_err("字段长度错误[%d]".(part_len));
    }

    var b = new char[part_len];
    long sz = reader.read_until_eof(b);
    if (sz != part_len)
    {
        throw_proto_err("连接异常关闭");
    }
    if (recv_char(reader) != '\r' || recv_char(reader) != '\n')
    {
        throw_proto_err(`每个字段值后需要‘\r\n’`);
    }

    return b;
}

public String recv_req(bufio.Reader reader, ref char[][] args)
{
    char ch;
    if (!reader.read_char(ref ch))
    {
        //对方关闭了连接
        return nil;
    }
    if (ch != '*')
    {
        throw_proto_err("协议头部需要字符‘*’");
    }

    long part_count = recv_int(reader);
    if (part_count <= 0)
    {
        throw_proto_err("协议的字段个数错误[%d]".(part_count));
    }

    var cmd = new String(recv_part(reader)).to_upper();

    args = new char[part_count - 1][];
    for (long i = 0; i < part_count - 1; ++ i)
    {
        args[i] = recv_part(reader);
    }

    return cmd;
}
