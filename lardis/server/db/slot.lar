import sync, sync/atomic;
from .. import immut_tree, data_types;

class Slot
{
    sync.FastMutex                          w_lock;
    immut_tree.Avl<data_types.Str, Value>   kvs;

    Slot()
    {
        this.w_lock = new sync.FastMutex();
        this.kvs    = new immut_tree.Avl<data_types.Str, Value>();
    }

    void do_write_cmd(data_types.Str k, ValueWriter vw)
    {
        this.w_lock.lock();
        defer this.w_lock.unlock();

        var kvs = atomic.load(ref this.kvs);

        kvs = kvs.write_value_by_key(k, []{
            public Value do_write(Value old_v, ref bool ok)
            {
                Any old_vv;
                if (ok)
                {
                    old_vv = old_v.v;
                }
                Any new_vv = vw.do_write(old_vv);
                ok = new_vv !== nil;
                Value new_v;
                if (ok)
                {
                    new_v = new Value(new_vv);
                }
                return new_v;
            }
        });

        atomic.store(ref this.kvs, kvs);
    }

    void do_read_cmd(data_types.Str k, ValueReader vr)
    {
        var kvs = atomic.load(ref this.kvs);
        var v = kvs.get(k, ref _);
        Any vv;
        if (v !== nil)
        {
            vv = v.v;
        }
        vr.do_read(vv);
    }
}
